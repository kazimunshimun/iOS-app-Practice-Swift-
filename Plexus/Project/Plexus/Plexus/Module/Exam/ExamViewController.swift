//
//  ExamViewController.swift
//  Plexus
//
//  Created Anik on 19/8/19.
//  Copyright © 2019 A7Studio. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import UIKit

class ExamViewController: UIViewController, ExamViewProtocol {

    let colorList = ["FF5B7F", "FC9970", "77A5F8", "D5A3FF", "9F6EA3", "FF74A4", "77F8B3", "A3CDFF", "F87777", "CAFFA3"]
    
    @IBOutlet weak var examCollectionView: UICollectionView!
    var presenter: ExamPresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
      //  examCollectionView.register(ExamHeaderView.self,forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,withReuseIdentifier: "examHeader")
        
        examCollectionView.register(UINib(nibName: "HeaderView", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "headerView")
    }

    private func setupViews() {
        let collectionViewFlowLayout = UICollectionViewFlowLayout()
        collectionViewFlowLayout.estimatedItemSize = CGSize(width: examCollectionView.frame.width, height: 72)
        collectionViewFlowLayout.headerReferenceSize = CGSize(width: examCollectionView.frame.width, height: 308)
        examCollectionView.collectionViewLayout = collectionViewFlowLayout
    }
    
    override func viewDidLayoutSubviews() {
        setupViews()
    }
}

extension ExamViewController: UICollectionViewDelegate, UICollectionViewDataSource{
    
    func collectionView(_ collectionView: UICollectionView,
                                 viewForSupplementaryElementOfKind kind: String,
                                 at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        case UICollectionView.elementKindSectionHeader:
            guard
                let headerView = collectionView.dequeueReusableSupplementaryView(
                    ofKind: kind,
                    withReuseIdentifier: "headerView",
                    for: indexPath) as? HeaderView
                else {
                    fatalError("Invalid view type")
            }
            return headerView
        default:
            assert(false, "Invalid element type")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "lessonCell", for: indexPath) as! LessonCell
        let color1 = colorList[indexPath.row * 2]
        let color2 = colorList[indexPath.row * 2 + 1]
        cell.gradientView.layer.addSublayer(GradientView.getGradientLayer(color1, color2, cell.lessonBackgroundView.frame))
        let lessonNumber = indexPath.row + 1
        cell.lessonNumberLabel.text = "Lesson \(lessonNumber.asWord)"
        return cell
    }
    
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 5
    }
}

public extension Int {
    var asWord: String {
        let numberValue = NSNumber(value: self)
        let formatter = NumberFormatter()
        formatter.numberStyle = .spellOut
        return formatter.string(from: numberValue)!
    }
}

